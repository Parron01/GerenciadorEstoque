# Dockerfile
# Stage 1: Builder
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Copy go.mod and go.sum first to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# Copy the entire application source code
COPY . .

# Build the application
# Ensure the output path is simple for the final stage
RUN go build -o /app/server cmd/server/main.go


# Stage 2: Final image
FROM alpine:latest

WORKDIR /app

# Copy migrations from the builder stage
# This ensures migrations are in the image at /app/migrations
COPY --from=builder /app/migrations ./migrations

# Copy the built executable from the builder stage
COPY --from=builder /app/server .

# Expose port (must match .env and docker-compose.yml)
EXPOSE 3000

# Command to run the executable
# The Go application (/app/server) handles running migrations internally via main.go
CMD ["/app/server"]